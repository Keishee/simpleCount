package simplecount;

import java.net.URL;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.ResourceBundle;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;

/**
 * Controller / View
 * @author da-sil_l
 */
public class MainFrameController implements Initializable, Observer {

    @FXML
    private TextField resultArea;
    @FXML
    private Label lastEquationLabel;
    private ArrayList<String> specialOps;
    private boolean shouldClear = false;
    private MainFrameModel model;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        specialOps = new ArrayList<>();
        specialOps.add("lg");
        specialOps.add("ex");
        specialOps.add("cos");
        specialOps.add("tan");
        model = new MainFrameModel();
        model.addObserver(this);
    }

    /**
     * Check the source object nature and returns its text accordingly
     * @param obj the source
     * @return the source's text
     */
    private String getObjectString(Object obj) {
        String text = "";
        if (obj instanceof MenuItem) {
            MenuItem mi = (MenuItem) obj;
            text = mi.getText();
        } else if (obj instanceof Button) {
            Button btn = (Button) obj;
            text = btn.getText();
        }
        return text;
    }

    private Boolean isOp(char text) {
        return (text == '+'
                || text == '-'
                || text == '*'
                || text == '/'
                || text == '%');
    }

    private Boolean isOp(String text) {
        return ("+".equals(text)
                || "-".equals(text)
                || "*".equals(text)
                || "/".equals(text)
                || "%".equals(text));
    }

    /**
     * Called when an operation button is pressed
     * @param event event generated by the button pressed
     */
    @FXML
    public void handleOperations(ActionEvent event) {
        String text = getObjectString(event.getSource());
        if ("‚Üê".equals(text)) {
            model.returnKey(resultArea.getText());
        } else if (isOp(text.charAt(0))) {
            model.addOperator(text, resultArea.getText());
        } else if ("=".equals(text)) {
            model.computeResult(resultArea.getText(), true);
        } else if ("C".equals(text)) {
            resultArea.clear();
        } else if (specialOps.contains(text)) {
            model.computeSpecialOperation(text, resultArea.getText());
        }
    }

    /**
     * Called when a numpad button is pressed
     * @param event event generated by the button pressed
     */
    @FXML
    public void handleNumPad(ActionEvent event) {
        if (shouldClear) {
            resultArea.clear();
        }
        String text = getObjectString(event.getSource());
        model.addNumPad(text, resultArea.getText());
    }

    /**
     * Called when ESCAPE key is pressed, clear the textField
     * @param e event generated by the button pressed
     */
    @FXML
    public void handleKeyPressed(KeyEvent e) {
        if (e.getCode() == KeyCode.ESCAPE) {
            resultArea.clear();
            lastEquationLabel.setText("");
        }
    }

    
    
    @Override
    public void update(Observable arg0, Object arg1) {
        if (arg1 instanceof String) {
            resultArea.setText((String) arg1);
        } else if (arg1 instanceof Label) {
            lastEquationLabel.setText(((Label) arg1).getText());
        } else if (arg1 instanceof Boolean) {
            shouldClear = (Boolean) arg1;
        }
    }
}
